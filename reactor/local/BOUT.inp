#
#

nout = 100     # number of output time-steps
timestep = 500.0  # time between outputs

MZ = 1     # number of points in z direction (2^n + 1)
MXG = 0    # No guard cells needed in X

[mesh]

ny = 400    # Resolution along field-line

length = 70        # Length of the domain in meters
length_xpt = 42  # Length from midplane to X-point [m]
area_expansion = 1 # Expansion factor Area(target) / Area(midplane)

dymin = 0.1  # Minimum grid spacing near target. Must be > 0 and < 1

# Parallel grid spacing
dy = (length / ny) * (1 + (1-dymin)*(1-y/pi))

# Calculate where the source ends in grid index
source = length_xpt / length
y_xpt = pi * ( 2 - dymin - sqrt( (2-dymin)^2 - 4*(1-dymin)*source ) ) / (1 - dymin)

nx = 1
dx = 1
ixseps1 = -1   # Branch-cut indices, specifying that
ixseps2 = -1   # the grid is in the SOL

# The following make the field-aligned
# metric tensor an identity metric
Rxy = 1
Bpxy = 1
Btxy = 0
Bxy = 1
hthe = 1
sinty = 0

symmetricGlobalY = true

##################################################
# derivative methods

[mesh:ddy]

first = C2
second = C2
upwind = W3

[solver]

mxstep = 100000  # Maximum number of internal steps per output

atol = 1e-8
rtol = 1e-3

use_precon = true

[sd1d]

diagnose = true  # Output additional diagnostics

# Normalisation factors
Nnorm = 1e20  # Reference density [m^-3]
Tnorm = 100   # Reference temperature [eV]
Bnorm = 1.0   # Reference magnetic field [T]
AA = 2.0      # Ion atomic number

Eionize = 13.6  # Energy lost per ionisation [eV]
excitation = true # Include electron-neutral excitation

volume_source = true   # Sources spread over a volume
density_upstream = 3e19  # Fix upstream density using feedback (<0 = off)

density_controller_p = 5e-2 # Density controller 'p' parameter
density_controller_i = 1e-3 # Density controller 'i' parameter

# Model parameters
vwall = 0.0        # Velocity of neutrals at the wall, as fraction of Franck-Condon energy

frecycle = 0.95            # Recycling fraction
fredistribute = 0.0        # Fraction of recycled neutrals redistributed evenly along length
redist_weight = H(y - pi)  # Weighting for redistribution

gaspuff = 0        # NOTE: In normalised units 
dneut    = 800.0     # Scale neutral gas diffusion rate
tn_floor = 0.5      # Minimum neutral gas temperature for diffusion calculation [eV]
nloss    = 0.0     # Neutral gas loss rate [1/s]
fimp = 0.01         # Impurity fraction
impurity_adas = true # Use Atomicpp to get ADAS data
impurity_species = ne  # Species. currently "c" (carbon) or "n" (Nitrogen)

sheath_gamma = 7.8 # Sheath heat transmission
neutral_gamma = 0.  # Neutral gas heat transmission
density_sheath = 1  # 0 = free, 1 = Neumann, 2 = constant nV
pressure_sheath = 1  # 0 = free, 1 = Neumann, 2 = constant (5/2)Pv + (1/2)nv^3

atomic = true      # Include atomic processes (CX/iz/rc)

# Set flux tube area as function of parallel grid index
# using normalised y coordinate from 0 to 2pi
area = 1 + (mesh:area_expansion - 1) * H(y - mesh:y_xpt)*(y - mesh:y_xpt)/(2*pi - mesh:y_xpt)

ion_viscosity = false  # Braginskii parallel ion viscosity (ions and neutrals)
gamma_sound = 1 # Ratio of specific heats in numerical diffusion

heat_conduction = true # Heat conduction
snb_model = false

[all]
bndry_all = neumann_o2  # Default boundary condition
                        # Note: Sheath boundary applied in code

[Ne] # Electron density
scale = 1

# Initial conditions
function = 0.1

flux = 4e23  # Particles per m^2 per second input
source = (flux/(mesh:length_xpt))*H(mesh:y_xpt - y)  # Particle input source
                           # as function of normalised y coordinate

[NVi]  # Parallel ion momentum
scale = 1
vtarg = 0.3
function = vtarg * Ne:scale * Ne:function * y / (2*pi)  # Linear from 0 to 0.03 in y
bndry_all = dirichlet_o2

[P]    # Plasma pressure P = 2 * Ne * T
scale = 1
function = 0.1   # Initial constant pressure

powerflux = 8e8  # Input power flux in W/m^2

source = (powerflux*2/3 / (mesh:length_xpt))*H(mesh:y_xpt - y)

# 1e7 W/m^2 / (L/2) with  L = 100 m , factor of 2 because power only from y = 0 to y=pi
# * 2/3 to get from energy to Pe

[Nn]
# Neutral density
scale = 1
function = 1e-4   # Initial flat, low density

[NVn]
evolve = true # Evolve neutral momentum?

[Pn]
evolve = true # Evolve neutral pressure? Otherwise Tn = Te model

Tstart = 3.5 # Starting temperature in eV

scale = 1.0
function = Nn:scale * Nn:function * Pn:Tstart / sd1d:Tnorm

